#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout (binding = 0) uniform raytraceParams 
{
	uint n_rays;
	uint n_triangles;
	uint n_vertices;

	uint m_triangles_vertex_offset;
	uint m_triangles_index_offset;
	uint m_triangles_n_indices;
	
	uint lm_width;
	uint lm_height;

} params;

layout(std140, binding = 1) readonly buffer indexUBO
{
	uint global_indices[];
};

layout(std140, binding = 2) readonly buffer vertUBO
{
	vec3 global_vertices[];
};

layout(std140, binding = 3) readonly buffer uvUBO
{
	vec3 map_uvs[];
};

layout(std140, binding = 4) buffer hitResults
{
	vec3 hits[];
};

layout(binding = 5, rgba8) uniform image2D imageOut;

layout (local_size_x = 32, local_size_y = 8, local_size_z = 1) in;

shared float m0,m1,m2;
shared bool b0,b1,bNegativeX;

shared uint i_0;
shared uint v_0,v_1,v_2;
shared vec2 w0,w1,w2;

float floor_y_value(float y)
{
	return (floor(params.lm_height * y)+0.5) / params.lm_height;
}

float floor_x_value(float x)
{
	return (floor(params.lm_width * x)+0.5) / params.lm_width;
}

float MajorX(float y)
{
	return w0.x + (m0 * (y - w0.y));
}

float MinorX(float y)
{
	if(b0 && b1)
	{
		if(bNegativeX)
		{
			return max(w0.x + (m1 * (y - w0.y)), w2.x + (m2 * (y - w2.y)));
		}
		else
		{
			return min(w0.x + (m1 * (y - w0.y)), w2.x + (m2 * (y - w2.y)));
		}
	}
	else if(b0)
	{
		return w0.x + (m1 * (y - w0.y));
	}
	else if(b1)
	{
		return w2.x + (m2 * (y - w2.y));
	}
	return 0;
}

uint indexed(uint v_i)
{
	return params.m_triangles_vertex_offset + global_indices[v_i];
}

uint indexed(uint v_i, uint offset)
{
	return params.m_triangles_vertex_offset + global_indices[v_i+offset];
}

void main()
{
	uint ix = gl_LocalInvocationID.x;
	uint iy = gl_LocalInvocationID.y;
	//uint thread_id = iy * gl_WorkGroupSize.x + ix;
	//uint global_thread_id = gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x);

	if(gl_WorkGroupID.x * 3 < params.m_triangles_n_indices && ix == 0 && iy == 0)
	{
		uint i_0 = params.m_triangles_index_offset + gl_WorkGroupID.x*3;

		if(map_uvs[indexed(i_0)].y < map_uvs[indexed(i_0,1)].y)
			v_0 = 0;
		else
			v_0 = 1;

		if(map_uvs[indexed(i_0,v_0)].y < map_uvs[indexed(i_0,2)].y)
			v_0 = v_0;
		else
			v_0 = 2;

		if(map_uvs[indexed(i_0,((v_0+1)%3))].y > map_uvs[indexed(i_0,((v_0+2)%3))].y)
		{
			v_1 = (v_0+1)%3;
			v_2 = (v_0+2)%3;
		}
		else
		{
			v_1 = (v_0+2)%3;
			v_2 = (v_0+1)%3;
		}

		v_0 = indexed(i_0,v_0);
		v_1 = indexed(i_0,v_1);
		v_2 = indexed(i_0,v_2);

		w0 = vec2(floor_x_value(map_uvs[v_0].x),floor_y_value(map_uvs[v_0].y));
		w1 = vec2(floor_x_value(map_uvs[v_1].x),floor_y_value(map_uvs[v_1].y));
		w2 = vec2(floor_x_value(map_uvs[v_2].x),floor_y_value(map_uvs[v_2].y));

		m0 = (w1.x - w0.x) / (w1.y - w0.y);
		m1 = (w2.x - w0.x) / (w2.y - w0.y);
		m2 = (w1.x - w2.x) / (w1.y - w2.y);

		b0=false;
		b1=false;

		if(map_uvs[v_2].y > map_uvs[v_0].y+0.0001)
			b0 = true;

		if(map_uvs[v_1].y > map_uvs[v_2].y+0.0001)
			b1 = true;

		bNegativeX = false;

		if(MajorX(w2.y) > w2.x)
			bNegativeX = true;
	}

	barrier();

	float ystep = 1.0 / params.lm_height;

	if(ix == 0 && iy == 0)
	{
		for( float y = w0.y; y < w1.y + 0.001; y += ystep)
		{
		
			imageStore(imageOut,ivec2(uint(params.lm_width * MajorX(y)),uint(params.lm_height * y)),vec4(1,1,1,1));
			imageStore(imageOut,ivec2(uint(params.lm_width * MinorX(y)),uint(params.lm_height * y)),vec4(1,1,1,1));

			if(y == w0.y || y + ystep > w1.y + 0.001)
			{
				if(bNegativeX==false)
					for( uint x = uint(params.lm_width * MajorX(y)); x <= uint(params.lm_width * MinorX(y)); x ++)
					{
						imageStore(imageOut,ivec2(x,uint(params.lm_height * y)),vec4(1,1,1,1));
					}
				else
					for( uint x = uint(params.lm_width * MajorX(y)); x >= uint(params.lm_width * MinorX(y)); x --)
					{
						imageStore(imageOut,ivec2(x,uint(params.lm_height * y)),vec4(1,1,1,1));
					}
			}
		}
	}

	barrier();

	return;
}




