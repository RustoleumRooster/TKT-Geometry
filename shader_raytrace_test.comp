#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

struct Node
{
	vec4 aabbMin;
	vec4 aabbMax;

	vec4 padding;

	uint left_node;
	uint right_node;

	uint first_prim;
	uint n_prims;
	
};

layout (binding = 0) uniform raytraceParams 
{
	vec3 eye_pos;
	uint n_rays;
	uint n_triangles;
	uint n_vertices;
	uint n_nodes;

	uint m_triangles_vertex_offset;
	uint m_triangles_index_offset;
	uint m_triangles_n_indices;
	
	uint lm_width;
	uint lm_height;
} params;

layout(std140, binding = 1) readonly buffer indexUBO
{
	uint global_indices[];
};

layout(std140, binding = 2) readonly buffer vertUBO
{
	vec3 global_vertices[];
};

layout(std140, binding = 3) readonly buffer uvUBO
{
	vec3 map_uvs[];
};

layout(std140, binding = 4) readonly buffer nodeUBO
{
	Node global_nodes[];
};

//an output buffer for debugging
layout(std140, binding = 5) buffer hitResults
{
	vec3 hits[];
};

layout(binding = 6, rgba8) uniform image2D imageOut;

//==================================================
// Random numbers (Tiny Encryption Algorithm)
//

uint[2] tea(uint v[2])
{
	uint v0 = v[0];
	uint v1 = v[1];
	uint delta = 0x9E3779B9;
	uint k0 = 0xA341316C;
	uint k1 = 0xC8013EA4;
	uint k2 = 0xAD90777D;
	uint k3 = 0x7E95761E;
	uint sum = 0;

	for(int i=0;i<6;i++)
	{
		sum+=delta;
		v0+= ((v1<<4) + k0) ^ (v1+sum) ^ ((v1>>5) + k1);
		v1+= ((v0<<4) + k2) ^ (v0+sum) ^ ((v0>>5) + k3);
	}

	return uint[2](v0,v1);
}

float random_to_float01(uint random)
{
	uint u = random >> 9 | 0x3F800000;
	return uintBitsToFloat(u) - 1.0;
}

float trace_node_triangles_hit(in uint node_i, in vec3 eye, in vec3 ray)
{
	vec3 edge1, edge2, rayVecXe2, s, sXe1;
	float det, invDet, u, v;

	float best = 0xFFFF;
	for(uint j = 0; j < global_nodes[node_i].n_prims; j++)
	{
		uint idx;

		if(j==0)
			idx = floatBitsToUint(global_nodes[node_i].padding.x);
		else if(j==1)
			idx = floatBitsToUint(global_nodes[node_i].padding.y);

		edge1 = global_vertices[global_indices[(idx*3) + 1]] - global_vertices[global_indices[idx*3]];
		edge2 = global_vertices[global_indices[(idx*3) + 2]] - global_vertices[global_indices[idx*3]];
		rayVecXe2 = cross(ray,edge2);
		det = dot(edge1,rayVecXe2);

		if(det > -0.00001 && det < 0.00001)
			continue;

		invDet = 1.0 / det;
		s = eye - global_vertices[global_indices[idx*3]];
		u = invDet * dot(s,rayVecXe2);

		if( u < 0.0 || u > 1.0) 
			continue;

		sXe1 = cross(s,edge1);
		v = invDet * dot(ray,sXe1);

		if(v < 0.0 || u+v > 1.0) 
			continue;

		float t = invDet * dot(edge2,sXe1);

		if(t > 0.001 && t < best)
			{
				best=t;
			}
	}
	return best;
}

float trace_node_hit(in uint node_i, in vec3 eye, in vec3 ray)
{
	Node node = global_nodes[node_i];
	float dif;
	float t;
	float best = 0xFFFF;
	vec3 hit;

	//X MIN PLANE
	dif = node.aabbMin.x - eye.x;
	t = dif / ray.x;
	hit = eye + ray*t;

	if(t > 0 && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//X MAX PLANE
	dif = node.aabbMax.x - eye.x;
	t = dif / ray.x;
	hit = eye + ray*t;

	if(t > 0 && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//Y MIN PLANE
	dif = node.aabbMin.y - eye.y;
	t = dif / ray.y;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//Y MAX PLANE
	dif = node.aabbMax.y - eye.y;
	t = dif / ray.y;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//Z MIN PLANE
	dif = node.aabbMin.z - eye.z;
	t = dif / ray.z;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && t < best)
		best = t;

	//Z MAX PLANE
	dif = node.aabbMax.z - eye.z;
	t = dif / ray.z;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && t < best)
		best = t;

	return best;
}

vec3 rand_hemisphere_ray(in vec3 N, in vec3 Tan, in vec3 BiTan, inout uint seed)
{
	uint[2] V = tea(uint[2](seed,0));

	float theta = acos( random_to_float01(V[0]) );
	float omega = (random_to_float01(V[1]) * 3.1415926535 * 2);
	
	float x = sin(theta)*cos(omega);
	float y = sin(theta)*sin(omega);
	float z = cos(theta);

	vec3 ray = Tan*x + BiTan*y + N*z;
	ray = normalize(ray);

	seed = V[1];

	return ray;
}

/*
vec3 get_vec3_from_uv(in float u, in float v)
{
	return params.v0 + (params.v1 - params.v0)*u + (params.v3 - params.v0)*v;
}*/


uint[8] stack;
uint stack_n;

void open_node(uint node_i, vec3 eye, vec3 ray)
{
	float left,right;

	left = trace_node_hit(global_nodes[node_i].left_node,eye,ray);

	right = trace_node_hit(global_nodes[node_i].right_node,eye,ray);

	if(left < 0xFFFF && right < 0xFFFF)
	{
		if(left < right)
		{
			stack[stack_n] = global_nodes[node_i].right_node;
			stack[stack_n+1] = global_nodes[node_i].left_node;
		}
		else
		{
			stack[stack_n] = global_nodes[node_i].left_node;
			stack[stack_n+1] = global_nodes[node_i].right_node;
		}

		stack_n += 2;
	}
	else if(left < 0xFFFF)
	{
		stack[stack_n] = global_nodes[node_i].left_node;
		stack_n += 1;
	}
	else if(right < 0xFFFF)
	{
		stack[stack_n] = global_nodes[node_i].right_node;
		stack_n += 1;
	}
}

float trace_scene_hit(vec3 eye, vec3 ray)
{
	stack_n=0;
	float best;

	if(trace_node_hit(0,eye,ray) < 0xFFFF)
	{
		open_node(0,eye,ray);

		while(stack_n > 0)
		{
			stack_n -= 1;

			if(global_nodes[stack[stack_n]].n_prims > 0)
			{
				best = trace_node_triangles_hit(stack[stack_n],eye,ray);

				//best = trace_node_hit(stack[stack_n],eye,ray);

				if(best < 0xFFFF)
					return best;
			}
			else
			{
				open_node(stack[stack_n],eye,ray);
			}
		}
	}

	return 0xFFFF;
}

//==================================================
// Layout
//
layout (local_size_x = 32, local_size_y = 8, local_size_z = 1) in;

//==================================================
// Shared variables
//

shared float yminf,ymaxf,xminf,xmaxf;
shared uint ymin,ymax,xmin,xmax;

shared float m0,m1,m2;
shared bool b0,b1,b2,bNegativeX;

shared uint i_0;
shared uint v_0,v_1,v_2;



//==================================================
// Interpolation functions
//

float MajorX(float y)
{
	return map_uvs[v_0].x + (m0 * (y - map_uvs[v_0].y));
}

float MinorX(float y)
{
	if(b0 && b1)
	{
		if(bNegativeX)
		{
			return max(map_uvs[v_0].x + (m1 * (y - map_uvs[v_0].y)),
					map_uvs[v_2].x + (m2 * (y - map_uvs[v_2].y)));
		}
		else
		{
			return min(map_uvs[v_0].x + (m1 * (y - map_uvs[v_0].y)),
					map_uvs[v_2].x + (m2 * (y - map_uvs[v_2].y)));
		}
	}
	else if(b0)
	{
		return map_uvs[v_0].x + (m1 * (y - map_uvs[v_0].y));
	}
	else if(b1)
	{
		return map_uvs[v_2].x + (m2 * (y - map_uvs[v_2].y));
	}
	return 0;
}

uint indexed(uint v_i)
{
	return params.m_triangles_vertex_offset + global_indices[v_i];
}

uint indexed(uint v_i, uint offset)
{
	return params.m_triangles_vertex_offset + global_indices[v_i+offset];
}

void main()
{
	uint ix = gl_LocalInvocationID.x;
	uint iy = gl_LocalInvocationID.y;
	uint thread_id = iy * gl_WorkGroupSize.x + ix;
	uint global_thread_id = gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x);

	uint rand_state = thread_id;
	vec3 ray = rand_hemisphere_ray(vec3(0,1,0),vec3(1,0,0),vec3(0,0,1),rand_state);

	barrier();

	float hit_t = trace_scene_hit(params.eye_pos,ray);

	//float hit_t = trace_node_hit(2,params.eye_pos,ray);

	barrier();

	if(thread_id < 256)
	{
		//hits[thread_id].x = hit_t;
		hits[thread_id] = params.eye_pos+ray*hit_t;
	}

	/*
	if(thread_id < params.n_nodes)
	{
		hits[thread_id].x = thread_id;
		hits[thread_id].y = global_nodes[thread_id].n_prims;
		hits[thread_id].z = global_indices[floatBitsToUint(global_nodes[thread_id].padding.x)*3];
	}*/

	barrier();

	return;

}




