#include "edit_env.h"
#include <irrlicht.h>
#include <iostream>
#include <sstream>
#include <iomanip>

#include "CameraPanel.h"
#include "CGUIWindow.h"
#include "csg_classes.h"
#include "utils.h"
#include "edit_classes.h"
#include "ex_gui_elements.h"
#include "CGUIEditBox2.h"
//#include "Reflection.h"


extern IrrlichtDevice* device;
using namespace irr;
using namespace core;
using namespace gui;
extern geometry_scene* g_scene;

namespace reflect
{
    void TypeDescriptor_Struct::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree_0, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        //std::cout<<name<<" adding widgets \n";//<<type_struct<<"...\n";
        int m_i = tree_0.size() > 0 ? tree_0[tree_0.size()-1] : 0;

        if(type_struct != NULL)
        {
            ExButton_FormField* ff = new ExButton_FormField();

            //ff->member_i = member_i;
            //std::vector<int> tree = tree_0;
            //tree.push_back(i);
            ff->tree_pos = tree_0;
            ff->text = type_struct->members[m_i].expanded ? "-" : "+";
            ff->tab = (tab == -1 ? 0: tab);
            ff->setVisible(bVisible);
            win->addEditField(ff);
        }

        if(type_struct != NULL)
        {
            Text_StaticField* f = new Text_StaticField();

            if(type_struct == NULL)
                f->setText(alias);
            else
                f->setText(type_struct->members[m_i].name);

            f->tab = (tab == -1 ? 0: tab);
            f->setVisible(bVisible);

            win->addEditField(f);
        }

        if(type_struct == NULL) //|| type_struct->members[member_i].expanded)
            for(int i=0;i<members.size();i++)
            {
                //std::cout<<members[i].name<<"\n";
                //std::cout<<this<<"\n";
                std::vector<int> tree{i};
                members[i].type->addFormWidget(win,this,tree,0, bVisible, bEditable, tab+1);
            }
        else //if(type_struct->members[m_i].expanded)
            for(int i=0;i<members.size();i++)
            {
               // std::cout<<members[i].name<<"\n";
                //std::cout<<this<<"\n";
                std::vector<int> tree = tree_0;
                tree.push_back(i);

                members[i].type->addFormWidget(win,this,tree,type_struct->members[m_i].offset, type_struct->members[m_i].expanded && bVisible, bEditable,tab+1);
            }

    }

    void TypeDescriptor_Color_Struct::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {

        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        Color_FormField* cf;

        cf = new Color_StaticField();
        cf->offset=offset;
        cf->tree_pos=tree;
        cf->setText(name);
        cf->tab=tab;
        cf->setVisible(bVisible);
        win->addEditField(cf);

        TypeDescriptor_Struct::addFormWidget(win,type_struct,tree,offset_base,bVisible,bEditable,tab);
    }

    void TypeDescriptor_MultiOption::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        ComboBox_FormField* f;

        if(bEditable)
            f = new ComboBox_EditField();
        else
            f = new ComboBox_StaticField();

        f->setText(name);
        for(std::string str : labels)
            f->AddItem(str);
        f->offset=offset;
        //f->member_i = m_i;
        f->tree_pos = tree;
        f->tab=tab;
        f->setVisible(bVisible);

        win->addEditField(f);
    }

    void TypeDescriptor_Int::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        Int_FormField* f;

        if(bEditable)
            f = new Int_EditField();
        else
            f = new Int_StaticField();

        f->setText(name);
        f->offset=offset;
        //f->member_i = m_i;
        f->tree_pos=tree;
        f->tab=tab;
        f->setVisible(bVisible);

        win->addEditField(f);
    }

    void TypeDescriptor_Byte::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        Byte_FormField* f;

        if(bEditable)
            f = new Byte_EditField();
        else
            f = new Byte_StaticField();

        f->setText(name);
        f->offset=offset;
        //f->member_i = m_i;
        f->tree_pos=tree;
        f->tab=tab;
        f->setVisible(bVisible);

        win->addEditField(f);
    }

    void TypeDescriptor_Bool::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        CheckBox_FormField* f;

        if(bEditable)
            f = new CheckBox_EditField();
        else
            f = new CheckBox_StaticField();

        f->setText(name);
        f->offset=offset;
        //f->member_i = m_i;
        f->tree_pos=tree;
        f->tab=tab;
        f->setVisible(bVisible);

        win->addEditField(f);
    }

    void TypeDescriptor_Float::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        Float_FormField* f;

        if(bEditable)
            f = new Float_EditField();
        else
            f = new Float_StaticField();

        f->setText(name);
        f->offset=offset;
        //f->member_i = m_i;
        f->tree_pos=tree;
        f->tab=tab;
        f->setVisible(bVisible);

        win->addEditField(f);
    }

    void TypeDescriptor_Vector2::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        Vector2_FormField* f;

        if(bEditable)
            f = new Vector2_EditField();
        else
            f = new Vector2_StaticField();

        f->setText(name);
        f->offset=offset;
        //f->member_i = m_i;
        f->tree_pos=tree;
        f->tab=tab;
        f->setActive(true);
        f->bWrite=true;

        win->addEditField(f);
    }

    void TypeDescriptor_Vector3::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        ExButton_FormField* ff = new ExButton_FormField();

        //ff->member_i = m_i;
        //ff->tree_pos=tree;
        ff->text = type_struct->members[m_i].expanded ? "-" : "+";
        ff->tab=tab;

        win->addEditField(ff);

        Float_FormField* f;


        if(type_struct->members[m_i].expanded)
        {
            if(bEditable)
            {
                f = new Float_EditField();
                f->setText(name + " X");
                f->offset=offset;
                //f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Float_EditField();
                f->setText(name + " Y");
                f->offset=offset+sizeof(f32);
                // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Float_EditField();
                f->setText(name + " Z");
                f->offset=offset+sizeof(f32)*2;
                // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);
            }
            else
            {
                f = new Float_StaticField();
                f->setText(name + " X");
                f->offset=offset;
                // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Float_StaticField();
                f->setText(name + " Y");
                f->offset=offset+sizeof(f32);
                // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Float_StaticField();
                f->setText(name + " Z");
                f->offset=offset+sizeof(f32)*2;
                //  f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);
            }
        }
        else
        {
            f = new Float_StaticField();
            f->setText(name);
            f->offset=offset;
            // f->member_i = m_i;
            f->tree_pos=tree;
            f->tab=tab;
            win->addEditField(f);
        }
    }

    void TypeDescriptor_SColor::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        ExButton_FormField* ff = new ExButton_FormField();

        ff->text = type_struct->members[m_i].expanded ? "-" : "+";
        ff->tab=tab;

        win->addEditField(ff);

        Byte_FormField* f;
        Color_FormField* cf;

        if(type_struct->members[m_i].expanded)
        {
            if(bEditable)
            {
                cf = new Color_StaticField();
                cf->offset=offset;
                // cf->member_i = m_i;
                cf->tree_pos=tree;
                cf->setText(name);
                cf->tab=tab;
                win->addEditField(cf);

                f = new Byte_EditField();
                f->setText(name + " B");
                f->offset=offset;
                //f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Byte_EditField();
                f->setText(name + " G");
                f->offset=offset + sizeof(char);
                //f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Byte_EditField();
                f->setText(name + " R");
                f->offset=offset + sizeof(char)*2;
                //f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

               // f = new Byte_EditField();
               // f->setText(name + " A");
               // f->offset=offset+ sizeof(char)*3;
               // win->addEditField(f);
            }
            else
            {
               // f = new Byte_StaticField();
               // f->setText(name + " A");
               // f->offset=offset;
               // win->addEditField(f);
                cf = new Color_StaticField();
                cf->offset=offset;
                cf->setText(name);
                // cf->member_i = m_i;
                cf->tree_pos=tree;
                cf->tab=tab;
                win->addEditField(cf);

                f = new Byte_StaticField();
                f->setText(name + " B");
                f->offset=offset;
                // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Byte_StaticField();
                f->setText(name + " G");
                f->offset=offset + sizeof(char);
                // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                f = new Byte_StaticField();
                f->setText(name + " R");
                f->offset=offset + sizeof(char)*2;
               // f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);

                // f = new Byte_StaticField();
                // f->setText(name + " A");
                // f->offset=offset+ sizeof(char)*3;
                // win->addEditField(f);
            }
        }
        else
        {
            cf = new Color_StaticField();
            cf->offset=offset;
           // cf->member_i = m_i;
            cf->tree_pos=tree;
            cf->setText(name);
            cf->tab=tab;
            win->addEditField(cf);
        }
    }

    void TypeDescriptor_Texture::addFormWidget(Reflected_GUI_Edit_Form* win, TypeDescriptor_Struct* type_struct, std::vector<int> tree, size_t offset_base, bool bVisible, bool bEditable, int tab)
    {
        int m_i = tree[tree.size()-1];
        std::string name = type_struct->members[m_i].name;
        size_t offset = type_struct->members[m_i].offset+offset_base;

        //ExButton_FormField* ff = new ExButton_FormField();

        //ff->member_i = m_i;
        //ff->text = type_struct->members[m_i].expanded ? "-" : "+";

        //win->addEditField(ff);

        Texture_FormField* f;


        //if(type_struct->members[m_i].expanded)
        {
            if(bEditable)
            {
                f = new Texture_EditField();
                f->setText(name);
                f->offset=offset;
                //f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);
                //std::cout<<f->offset<<"...\n";
            }
            else
            {
                f = new Texture_StaticField();
                f->setText(name);
                f->offset=offset;
                //f->member_i = m_i;
                f->tree_pos=tree;
                f->tab=tab;
                win->addEditField(f);
            }
        }
    }

} // namespace reflect

void EditWindow::Show(reflect::TypeDescriptor_Struct* typeDesc, void* obj)
{
    form = new Reflected_GUI_Edit_Form(Environment,this,g_scene,GUI_ID_REFLECTED_BASE,
                                            core::rect<s32>(core::vector2di(0,28),core::dimension2du(120,128)));

    //typeDesc->addFormWidgets("", form,true);
    typeDesc->addFormWidget(form,NULL,std::vector<int>{},0,true,true,-1);

    OK_BUTTON_ID = form->ShowWidgets(GUI_ID_REFLECTED_BASE+1);

    if(obj)
        form->read(obj);

    core::vector2di pos = getRelativePosition().UpperLeftCorner;
    this->DesiredRect = core::rect<s32>(pos,core::dimension2d<u32>(196,form->getTotalHeight()+86));
    this->recalculateAbsolutePosition(true);

    int ypos = form->getTotalHeight()+40;

    Environment->addButton(core::rect<s32>(core::vector2di(120,ypos),core::vector2di(180,ypos+28)),this,OK_BUTTON_ID,L"Ok");

    bringToFront(form);

    my_typeDesc = typeDesc;
    my_obj = obj;
}


void EditWindow::refresh()
{
    core::list<gui::IGUIElement*> child_list = this->getChildren();
    core::list<gui::IGUIElement*>::Iterator it = child_list.begin();

    for(;it != child_list.end();++it)
    {
        if(*it != this->getCloseButton())
            this->removeChild(*it);
    }

    form->drop();

    Show(my_typeDesc, my_obj);
}

void EditWindow::click_OK()
{
    this->remove();
}

void EditWindow::write(void* obj)
{
    if(form && obj)
        form->write(obj);
}

bool EditWindow::OnEvent(const SEvent& event)
{
    if(event.EventType == EET_GUI_EVENT)
    {
        s32 id = event.GUIEvent.Caller->getID();
        gui::IGUIEnvironment* env = device->getGUIEnvironment();

        switch(event.GUIEvent.EventType)
        {
            case EGET_BUTTON_CLICKED:
            {
                if(id==OK_BUTTON_ID)
                {
                    click_OK();
                    return true;
                }
                else
                {
                    FormField* field = form->getFieldFromId(id);
                    if(field)
                    {
                        std::cout<<"yes\n";
                        if(field->getButtonType() == FORM_FIELD_EXPAND_BUTTON)
                        {
                            ((ExButton_FormField*)field)->toggle(my_typeDesc);
                            refresh();
                        }
                        else if(field->getButtonType() ==  FORM_FIELD_BUTTON)
                        {
                            field->clickButton();
                        }
                    }
                break;
                }

            } break;
        }
    }

    gui::CGUIWindow::OnEvent(event);
}

EditWindow::~EditWindow()
{
    if(form)
        form->drop();
}

//
//  Reflected GUI Form
//

Reflected_GUI_Edit_Form::~Reflected_GUI_Edit_Form()
{
    if(this->edit_fields)
        delete this->edit_fields;
    this->edit_fields=NULL;
}

bool Reflected_GUI_Edit_Form::OnEvent(const SEvent& event)
{
    if (isEnabled())
	{
		switch(event.EventType)
		{
		case EET_GUI_EVENT:

		    s32 id = event.GUIEvent.Caller->getID();
            switch(event.GUIEvent.EventType)
            {
            case EGET_BUTTON_CLICKED:
                {

                    /*
                FormField* field = getFieldFromId(id);
                if(field)
                {
                    reflect::Member* mm =  ((ExButton_FormField*)field)->memberPtr;
                    if(mm)
                    {
                       // m->expanded = m->expanded ? false : true;
                    }
                }*/
                break;
                }
            }
        break;
		}
	}
	return gui::IGUIElement::OnEvent(event);
}

int Reflected_GUI_Edit_Form::getTotalHeight()
{
    int h=0;
    FormField* f = edit_fields;
    while(f)
    {
        h+=f->getHeight();
        f=f->next;
    }
    return h*line_height+4;
}

int Reflected_GUI_Edit_Form::getEditFieldsCount()
{
    int i=0;
    FormField* f = edit_fields;
    while(f)
    {
        i+=1;
        f=f->next;
    }

    return i;
}

FormField* Reflected_GUI_Edit_Form::getParentField(FormField* field)
{
    if(field)
    {
        std::vector<int> pos = field->tree_pos;
        pos.pop_back();

        FormField* f = edit_fields;

        while(f)
        {
            if(f->tree_pos == pos)
                return f;
            f=f->next;
        }
    }
    return NULL;
}

FormField* Reflected_GUI_Edit_Form::getFieldFromId(int ID_)
{
    FormField* f = edit_fields;
    while(f)
    {
        for(int i=0;i<f->getNumIds();i++)
        {
            if(f->my_ID+i == ID_)
                return f;
        }
        f=f->next;
    }
    return NULL;
}

int Reflected_GUI_Edit_Form::ShowWidgets(int start_ID)
{
    core::vector2di pos = getRelativePosition().UpperLeftCorner;
    this->DesiredRect = core::rect<s32>(pos,core::dimension2d<u32>(column_right_end,getTotalHeight()));
    this->recalculateAbsolutePosition(false);

    FormField* f = edit_fields;
    int cur_ID=start_ID;
    int ypos=4;
    while(f)
    {
        int inc = f->addWidget(this,cur_ID,ypos);
        ypos+= inc*line_height;
        cur_ID+=f->getNumIds();
        f=f->next;
    }
    return cur_ID;
}

void Reflected_GUI_Edit_Form::addEditField(FormField* new_f)
{
    if(!this->edit_fields)
        this->edit_fields=new_f;
    else
    {
        FormField* f = this->edit_fields;
        while(f->next != NULL)
            f=f->next;
        f->next = new_f;
    }
}

void Reflected_GUI_Edit_Form::read(void* obj)
{
    FormField* f = edit_fields;
    while(f)
    {
        f->readValue(obj);
        f=f->next;
    }
}

void Reflected_GUI_Edit_Form::write(void* obj)
{
    FormField* f = edit_fields;
    while(f)
    {
        if(f->bWrite)
            f->writeValue(obj);
        f=f->next;
    }
}

//
//  Widgets
//

#define BEGIN_WIDGET() \
    owner = win; \
    my_ID = ID; \
    gui::IGUIEnvironment* env = device->getGUIEnvironment(); \
    if(bVisible) {

#define END_WIDGET() \
    }\
    return this->getHeight();

/*
#define WIDGET_LEFT_POS \
    core::vector2di(win->column_left_begin,ypos),core::vector2di(win->column_left_end,ypos+win->text_height)

#define WIDGET_RIGHT_POS \
    core::vector2di(win->column_right_begin,ypos),core::vector2di(win->column_right_end,ypos+win->text_height)
*/
#define WIDGET_LEFT_POS(n) \
    core::vector2di(win->column_left_begin+tab*24,ypos+win->line_height*n),core::vector2di(win->column_left_end,ypos+win->line_height*n+win->text_height)

#define WIDGET_RIGHT_POS(n) \
    core::vector2di(win->column_right_begin,ypos+win->line_height*n-4),core::vector2di(win->column_right_end,ypos+win->line_height*n+win->text_height-4)

#define WIDGET_RIGHT_TEXT_POS(n) \
    core::vector2di(win->column_right_begin,ypos+win->line_height*n),core::vector2di(win->column_right_end,ypos+win->line_height*n+win->text_height)


gui::IGUIElement* FormField::getEditElement()
{
    return owner->getElementFromId(my_ID,false);
}

//
//  Expand/Collapse Button
//

int ExButton_FormField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());

    core::rect<s32> rect(core::vector2di(win->column_left_begin-20+tab*24,ypos+0),
                                           core::vector2di(win->column_left_begin-4+tab*24,ypos+16));
   // env->addButton(rect,win,ID,txt.c_str());
   Flat_Button* ex_button = new Flat_Button(env,win,ID,rect);
   ex_button->setText(txt.c_str());
   ex_button->drop();

/*
    gui::IGUIButton* button = env->addButton(core::rect<s32>(core::vector2di(win->column_left_begin-20+tab*24,ypos+0),
                                           core::vector2di(win->column_left_begin-4+tab*24,ypos+16)),
                                            win,ID,L"");*/
/*
    gui::IGUISkin *skin = env->getSkin();
    gui::IGUISpriteBank* sprites = skin->getSpriteBank();
    button->setSpriteBank(sprites);
    EGDI_
    button->setSprite(EGBS_BUTTON_UP, skin->getIcon(EGDI_EXPAND), skin->getColor(EGDC_WINDOW_SYMBOL));
    button->setSprite(EGBS_BUTTON_DOWN, skin->getIcon(EGDI_EXPAND), skin->getColor(EGDC_WINDOW_SYMBOL));*/
   //
    //gui::EGDI_EXPAND
   // skin->
   //core::rect<s32> r = win->getAbsolutePosition();
   // skin->drawIcon(win, EGDI_EXPAND, core::vector2di(win->column_left_begin-12+tab*24,ypos+8));

    END_WIDGET()
}

void ExButton_FormField::toggle(reflect::TypeDescriptor_Struct* typeDesc)
{
    //typeDesc->members[member_i].expanded = !typeDesc->members[member_i].expanded;
/*
    reflect::TypeDescriptor_Struct* t = typeDesc;

    for(int i=0; i<tree_pos.size()-1; i++)
    {
        int m_i = tree_pos[i];
        t = (reflect::TypeDescriptor_Struct*)t->members[m_i].type;
    }
    int m_0 = tree_pos[tree_pos.size()-1];

    t->members[m_0].expanded = !t->members[m_0].expanded;*/

    reflect::Member* m = typeDesc->getTreeNode(this->tree_pos);
    m->expanded = !m->expanded;
}


//
//  Text Only
//

int Text_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    owner = win;
    my_ID = ID;
    gui::IGUIEnvironment* env = device->getGUIEnvironment();
    if(bVisible) {

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    END_WIDGET()
}

//
//  Float
//

int Float_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_TEXT_POS(0)),false,false,win,ID);

    END_WIDGET()
}

int Float_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    //CGUIEditBox2* box = new CGUIEditBox2(L"",true,env,win,ID,core::rect<s32>(WIDGET_RIGHT_POS(0)));
    //box->drop();
    gui::IGUIEditBox* box = env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),true,win,ID);
    box->setDrawBackground(false);


    END_WIDGET()
}

void Float_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            f32 val = std::atof(core::string<char>(editbox->getText()).c_str());
            *get(obj) = val;

        }
    }
}

void Float_FormField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            std::wstringstream ss;
            ss<<std::fixed << std::setprecision(3) << *get(obj);
            editbox->setText(ss.str().c_str());
        }
    }
}

//
//  Vector2 float
//

int Vector2_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"X:",core::rect<s32>(core::vector2di(win->column_right_begin-20,ypos+0),core::vector2di(win->column_right_begin,ypos+win->text_height+0)),false,false,win,-1);
    env->addStaticText(L"Y:",core::rect<s32>(core::vector2di(win->column_right_begin-20,ypos+win->text_height+4),core::vector2di(win->column_right_begin,ypos+win->text_height*2+4)),false,false,win,-1);

    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),false,false,win,ID);
    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(1)),false,false,win,ID+1);

    END_WIDGET()
}

int Vector2_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"X",core::rect<s32>(core::vector2di(win->column_right_begin-16,ypos+4),core::vector2di(win->column_right_begin,ypos+win->text_height+4)),false,false,win,-1);
    env->addStaticText(L"Y",core::rect<s32>(core::vector2di(win->column_right_begin-16,ypos+win->text_height+8),core::vector2di(win->column_right_begin,ypos+win->text_height*2+8)),false,false,win,-1);

    env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),true,win,ID);
    env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(1)),true,win,ID+1);

    END_WIDGET()
}

void Vector2_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        gui::IGUIEditBox* editbox1 =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID+1));

        if(editbox && editbox1)
        {
            f32 X = std::atof(core::string<char>(editbox->getText()).c_str());
            f32 Y = std::atof(core::string<char>(editbox1->getText()).c_str());
            *get(obj) = core::vector2df(X,Y);
        }
    }
}

void Vector2_FormField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        gui::IGUIEditBox* editbox1 =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID+1));

        if(editbox && editbox1)
        {
            std::wstringstream ss,ss1;
            ss << std::fixed << std::setprecision(3) << get(obj)->X;
            editbox->setText(ss.str().c_str());
            ss1 << std::fixed << std::setprecision(3) << get(obj)->Y;
            editbox1->setText(ss1.str().c_str());
        }
    }
}


//
//  Vector3 float
//

int Vector3_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"X:",core::rect<s32>(core::vector2di(win->column_right_begin-20,ypos+0),core::vector2di(win->column_right_begin,ypos+win->text_height+0)),false,false,win,-1);
    env->addStaticText(L"Y:",core::rect<s32>(core::vector2di(win->column_right_begin-20,ypos+win->text_height+4),core::vector2di(win->column_right_begin,ypos+win->text_height*2+4)),false,false,win,-1);
    env->addStaticText(L"Z:",core::rect<s32>(core::vector2di(win->column_right_begin-20,ypos+win->text_height*2+8),core::vector2di(win->column_right_begin,ypos+win->text_height*3+8)),false,false,win,-1);

    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),false,false,win,ID);
    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(1)),false,false,win,ID+1);
    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(2)),false,false,win,ID+2);

    END_WIDGET()
}

int Vector3_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"X",core::rect<s32>(core::vector2di(win->column_right_begin-16,ypos+4),core::vector2di(win->column_right_begin,ypos+win->text_height+4)),false,false,win,-1);
    env->addStaticText(L"Y",core::rect<s32>(core::vector2di(win->column_right_begin-16,ypos+win->text_height+8),core::vector2di(win->column_right_begin,ypos+win->text_height*2+8)),false,false,win,-1);
    env->addStaticText(L"Z",core::rect<s32>(core::vector2di(win->column_right_begin-16,ypos+win->text_height*2+12),core::vector2di(win->column_right_begin,ypos+win->text_height*3+12)),false,false,win,-1);

    env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),true,win,ID);
    env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(1)),true,win,ID+1);
    env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(2)),true,win,ID+2);

    END_WIDGET()
}

void Vector3_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        gui::IGUIEditBox* editbox1 =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID+1));
        gui::IGUIEditBox* editbox2 =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID+2));

        if(editbox && editbox1 && editbox2)
        {
            f32 X = std::atof(core::string<char>(editbox->getText()).c_str());
            f32 Y = std::atof(core::string<char>(editbox1->getText()).c_str());
            f32 Z = std::atof(core::string<char>(editbox2->getText()).c_str());
            *get(obj) = core::vector3df(X,Y,Z);
        }
    }

}

void Vector3_FormField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        gui::IGUIEditBox* editbox1 =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID+1));
        gui::IGUIEditBox* editbox2 =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID+2));

        if(editbox && editbox1 && editbox2)
        {
            std::wstringstream ss,ss1,ss2;
            ss << std::fixed << std::setprecision(3) << get(obj)->X;
            editbox->setText(ss.str().c_str());
            ss1 << std::fixed << std::setprecision(3) << get(obj)->Y;
            editbox1->setText(ss1.str().c_str());
            ss2 << std::fixed << std::setprecision(3) << get(obj)->Z;
            editbox2->setText(ss2.str().c_str());
        }
    }
}

//
//  Integer
//

void Int_EditField::setActive(bool b)
{
    if(bVisible){
        gui::IGUIEditBox* box = (gui::IGUIEditBox*)getEditElement();
    }
}

int Int_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    gui::IGUIEditBox* box = env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),true,win,ID);

    END_WIDGET()
}

int Int_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    owner = win;
    my_ID = ID;
    gui::IGUIEnvironment* env = device->getGUIEnvironment();
    if(bVisible) {

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_TEXT_POS(0)),false,false,win,ID);

    END_WIDGET()
}

void Int_FormField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            std::wstringstream ss;
            ss<<*get(obj);
            editbox->setText(ss.str().c_str());
        }
    }
}

void Int_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            int val = core::strtoul10(core::string<char>(editbox->getText()).c_str());
            *get(obj) = val;
        }
    }
}

//
//  Texture
//

void Texture_EditField::setActive(bool b)
{
    //gui::IGUIEditBox* box = (gui::IGUIEditBox*)getEditElement();
    //box->setDrawBackground(b);
}

int Texture_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    //env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),false,false,win,ID);
    //env->addStaticText(L"HI",core::rect<s32>(WIDGET_RIGHT_POS(1)),false,false,win,ID);
    env->addButton(core::rect<s32>(WIDGET_RIGHT_POS(0)),
                                            win,ID,L"Set Texture");

    END_WIDGET()
}

int Texture_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    owner = win;
    my_ID = ID;
    gui::IGUIEnvironment* env = device->getGUIEnvironment();
    if(bVisible) {

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),false,false,win,ID);

    END_WIDGET()
}

//core::del

void Texture_FormField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            //video::ITexture* tex = *get(obj);
            my_texture = *get(obj);

            if(my_texture != NULL)
            {
                io::path path = my_texture->getName();
                core::deletePathFromFilename(path);
                core::cutFilenameExtension(path,path);
                core::stringw str = path;
                editbox->setText(str.c_str());
            }
            else
                editbox->setText(L"no texture");
        }
    }
}

void Texture_FormField::clickButton()
{
    if(this->owner && this->owner->g_scene && bVisible)
    {
        my_texture = this->owner->g_scene->getTexturePickerBase()->getCurrentTexture();

        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            if(my_texture != NULL)
            {
                io::path path = my_texture->getName();
                core::deletePathFromFilename(path);
                core::cutFilenameExtension(path,path);
                core::stringw str = path;
                editbox->setText(str.c_str());
            }
            else
                editbox->setText(L"no texture");
        }
    }
}

void Texture_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        *get(obj) = my_texture;
    }
}

//
//  Color
//

int Color_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    owner = win;
    my_ID = ID;
    gui::IGUIEnvironment* env = device->getGUIEnvironment();
    if(bVisible) {

    //std::wstring txt(text.begin(),text.end());
    //env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    ypos_=ypos;

    END_WIDGET()
}

void Color_StaticField::readValue(void* obj)
{
    video::IVideoDriver* driver = owner->getEnvironment()->getVideoDriver();
    gui::IGUIEnvironment* env = device->getGUIEnvironment();

    if(texture)
    {
        this->owner->getEnvironment()->getVideoDriver()->removeTexture(texture);
        this->texture = NULL;
    }

    FormField* f = this->owner->edit_fields;

    this->bWrite = true;
    while(f)
    {
        std::vector<int> pos = f->tree_pos;
        pos.pop_back();

        if(pos == this->tree_pos && !f->bWrite)
        {
            this->bWrite = false;
            std::cout<<f->text<<" is off\n";
            break;
        }

        f= f->next;
    }

    if(this->owner && obj && bVisible && bWrite)
    {
        //video::SColor::get
        video::SColor col;//=(video::SColor)*get(obj);
        col.setData(get(obj),video::ECF_A8R8G8B8);
        video::IImage* img = makeSolidColorImage(driver,col);
        texture = driver->addTexture(irr::io::path("color"), img);

        Reflected_GUI_Edit_Form* win = this->owner;
        if(texture)
        {
            gui::IGUIImage* img1;
            img1 = env->addImage(
                 core::rect<s32>(core::vector2di(win->column_right_begin,ypos_+win->line_height*0-4),core::vector2di(win->column_right_end,ypos_+win->line_height*0+win->text_height-4)),
                                 this->owner,my_ID,NULL,false);
            img1->setImage(texture);
            img1->setScaleImage(true);

        }
        img->drop();
    }
}

//
//  Byte
//

void Byte_EditField::setActive(bool b)
{
    if(bVisible) {
        gui::IGUIEditBox* box = (gui::IGUIEditBox*)getEditElement();
        box->setDrawBackground(b);
    }
}

int Byte_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    gui::IGUIEditBox* box = env->addEditBox(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),true,win,ID);

    END_WIDGET()
}

int Byte_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    owner = win;
    my_ID = ID;
    gui::IGUIEnvironment* env = device->getGUIEnvironment();
    if(bVisible) {

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),false,false,win,ID);

    END_WIDGET()
}

void Byte_FormField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            std::wstringstream ss;
            u32 n=(u32)*get(obj);
            n = n & 0x000000FF;
            ss<<n;
            editbox->setText(ss.str().c_str());
        }
    }
}

void Byte_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIEditBox* editbox =  (gui::IGUIEditBox*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            u32 val = core::strtoul10(core::string<char>(editbox->getText()).c_str());
            val = std::min((u32)255,val);
            *get(obj) = *(char*)&val;
        }
    }
}

//
//  ComboBox
//

void ComboBox_FormField::AddItem(std::string text)
{
    items.push_back(text);
}

int ComboBox_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    gui::IGUIComboBox* box = env->addComboBox(core::rect<s32>(WIDGET_RIGHT_POS(0)),win,ID);
    //box->set

    for(int i=0;i<this->items.size();i++)
    {
        std::wstring s(items[i].begin(),items[i].end());
        box->addItem(s.c_str(),i);
    }

    END_WIDGET()
}

int ComboBox_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_POS(0)),false,false,win,ID);

    END_WIDGET()
}

void ComboBox_EditField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIComboBox* editbox =  (gui::IGUIComboBox*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            editbox->setSelected(*get(obj));
        }
    }
}

void ComboBox_StaticField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            //std::wstring txt(items[*get(obj)].begin(),items[*get(obj)].end());
            //editbox->setText(txt.c_str());
        }
    }
}

void ComboBox_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIComboBox* box =  (gui::IGUIComboBox*)(owner->getElementFromId(my_ID));
        if(box)
        {
            int val = box->getSelected();
            *get(obj) = val;
        }
    }
}

void ComboBox_FormField::setActive(bool active)
{
    if(!active  && bVisible)
    {
        if(this->owner)
        {
            gui::IGUIComboBox* box =  (gui::IGUIComboBox*)(owner->getElementFromId(my_ID));
            if(box)
            {
                box->setSelected(-1);
            }
        }
    }
}

//
//  Boolean
//

int CheckBox_EditField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);
    gui::IGUICheckBox* box = env->addCheckBox(false,
                            core::rect<s32>(core::vector2di(win->column_right_end-18,ypos-2),core::vector2di(win->column_right_end,ypos+win->text_height-2)),win,ID);

    END_WIDGET()
}

int CheckBox_StaticField::addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)
{
    BEGIN_WIDGET()

    std::wstring txt(text.begin(),text.end());
    env->addStaticText(txt.c_str(),core::rect<s32>(WIDGET_LEFT_POS(0)),false,false,win,-1);

    env->addStaticText(L"",core::rect<s32>(WIDGET_RIGHT_TEXT_POS(0)),false,false,win,ID);

    END_WIDGET()
}

void CheckBox_EditField::writeValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUICheckBox* box =  (gui::IGUICheckBox*)(owner->getElementFromId(my_ID));
        if(box)
        {
            bool val = box->isChecked();
            *get(obj) = val;
        }
    }
}

void CheckBox_EditField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUICheckBox* editbox =  (gui::IGUICheckBox*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            editbox->setChecked(*get(obj));
        }
    }
}

void CheckBox_StaticField::readValue(void* obj)
{
    if(this->owner && obj && bVisible)
    {
        gui::IGUIElement* editbox =  (gui::IGUIElement*)(owner->getElementFromId(my_ID));
        if(editbox)
        {
            std::wstringstream ss;
            if(*get(obj) == true)
                ss<<"True";
            else
                ss<<"False";
            editbox->setText(ss.str().c_str());
        }
    }
}

