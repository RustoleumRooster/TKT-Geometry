#ifndef _EDIT_CLASSES_H_
#define _EDIT_CLASSES_H_

#include <vector>
#include <iostream>
#include <irrlicht.h>
#include "reflection.h"
#include "CGUIWindow.h"

using namespace irr;

class FormField;
class Reflected_GUI_Edit_Form;
class geometry_scene;

namespace reflect
{
class TypeDescriptor;
class Member;
}

class EditWindow : public irr::gui::CGUIWindow
{
public:
    EditWindow(gui::IGUIEnvironment* env, gui::IGUIElement* parent, geometry_scene* g_scene_, s32 id,core::rect<s32> rect)
    : gui::CGUIWindow(env,parent,id,rect) ,g_scene(g_scene_) {}
    ~EditWindow();

    void Show(reflect::TypeDescriptor_Struct* typeDesc, void* obj);
    void refresh();
    virtual void click_OK();
    virtual bool OnEvent(const SEvent& event);
    virtual void write(void* obj);

    int OK_BUTTON_ID = 0;
    Reflected_GUI_Edit_Form* form = NULL;

    reflect::TypeDescriptor_Struct* my_typeDesc = NULL;
    void* my_obj=NULL;
    geometry_scene* g_scene=NULL;
};

class Reflected_GUI_Edit_Form : public gui::IGUIElement
{
public:

    Reflected_GUI_Edit_Form(gui::IGUIEnvironment* env, gui::IGUIElement* parent, geometry_scene* g_scene_, s32 id,core::rect<s32> rect)
    : gui::IGUIElement(gui::EGUIET_ELEMENT,env,parent,id,rect) , g_scene(g_scene_)
    {}
    ~Reflected_GUI_Edit_Form();

    virtual bool OnEvent(const SEvent& event);

    void addEditField(FormField*);
    int ShowWidgets(int);
    int getTotalHeight();
    int getEditFieldsCount();
    void read(void* obj);
    void write(void* obj);
    FormField* getFieldFromId(int);
    FormField* getParentField(FormField*);
    gui::IGUIEnvironment* getEnvironment(){return this->Environment;}

    FormField* edit_fields = NULL;

    int line_height = 24;
    int text_height = 22;
    int column_left_begin = 16;
    int column_left_end = 100;
    int column_middle_begin = 100;
    int column_middle_end = 100;
    int column_right_begin = 100;
    int column_right_end = 164;
    geometry_scene* g_scene=NULL;
};

//
//  Base for all form edit / static fields
//
enum
{
    FORM_FIELD_NO_BUTTON,
    FORM_FIELD_EXPAND_BUTTON,
    FORM_FIELD_BUTTON

};


class FormField
{
public:
    ~FormField(){if(next)delete next; next=NULL;}
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos) = 0;
    virtual void setText(std::string text_){this->text = text_;}
    virtual void writeValue(void* obj) = 0;
    virtual void readValue(void* obj) = 0;
    virtual void setVisible(bool visible) {bVisible = visible;}
    virtual bool isVisible() {return bVisible;}
    virtual int getHeight(){return bVisible?1:0;}
    virtual int getNumIds(){return 1;}
    virtual int getButtonType() {return FORM_FIELD_NO_BUTTON;}
    virtual void clickButton() {}
    virtual void copy(void*, void*) {}

    virtual bool is_equal(void* a, void* b) = 0;
    gui::IGUIElement* getEditElement();
    virtual void setActive(bool) {};

    std::string text;
    FormField* next = NULL;
    Reflected_GUI_Edit_Form* owner = NULL;
    int my_ID = 0;
    int expand_button_ID = 0;

    bool bVisible = true;
    bool bWrite = true;
    size_t offset;
    //int member_i;
    std::vector<int> tree_pos;
    int tab;
};



class ExButton_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void readValue(void* obj){};
    virtual void writeValue(void* obj){};
    virtual void setActive(bool) {};
    virtual bool is_equal(void* a, void* b) {return false;}
    virtual int getHeight(){return 0;}
    virtual int getNumIds(){return 1;}
    virtual int getButtonType() {return FORM_FIELD_EXPAND_BUTTON;}
    void toggle(reflect::TypeDescriptor_Struct*);

};

class Text_FormField : public FormField
{
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void readValue(void* obj){}
    virtual void writeValue(void* obj){}
    virtual void setActive(bool) {}
    virtual bool is_equal(void* a, void* b) {return false;}
};

class Text_StaticField : public Text_FormField
{
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
};

//
//  Integer
//

class Int_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void readValue(void* obj);
    virtual void writeValue(void* obj)=0;
    virtual void setActive(bool) {};
    virtual void copy(void* obj, void* obj2){
        *get(obj) = *get(obj2);
    }
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    int* get(void* obj_) {return (int*)(obj_ + offset);}
};

class Int_EditField : public Int_FormField
{
public:
    virtual void setActive(bool);
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
};

class Int_StaticField : public Int_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
};


class Color_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void readValue(void* obj)=0;
    virtual void writeValue(void* obj){}
    virtual int getHeight(){return 0;}
    virtual int getNumIds(){return 1;}

    video::ITexture* texture = NULL;
    int ypos_=0;
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    video::SColor* get(void* obj_) {return (video::SColor*)(obj_ + offset);}
};

class Color_StaticField : public Color_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void readValue(void* obj);
};

//
// Byte
//

class Byte_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void readValue(void* obj);
    virtual void writeValue(void* obj)=0;
    virtual void setActive(bool) {};
    virtual void copy(void* obj, void* obj2){
        *get(obj) = *get(obj2);
    }
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    char* get(void* obj_) {return (char*)(obj_ + offset);}
};

class Byte_EditField : public Byte_FormField
{
public:
    virtual void setActive(bool);
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
};

class Byte_StaticField : public Byte_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
};

//
// Texture
//

class Texture_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void readValue(void* obj);
    virtual void writeValue(void* obj)=0;
    virtual void setActive(bool) {};
    //virtual int getHeight(){return 2;}
    virtual int getButtonType() {return FORM_FIELD_BUTTON;}
    virtual void clickButton();
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    video::ITexture** get(void* obj_) {return (video::ITexture**)(obj_ + offset);}

    video::ITexture* my_texture = NULL;
};

class Texture_EditField : public Texture_FormField
{
public:
    virtual void setActive(bool);
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
};

class Texture_StaticField : public Texture_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
};

//
// Floating Point
//

class Float_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void readValue(void* obj);
    virtual void writeValue(void* obj)=0;
    virtual void copy(void* obj, void* obj2){
        *get(obj) = *get(obj2);
    }
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    f32* get(void* obj_) {return (f32*)(obj_ + offset);}
};

class Float_EditField : public Float_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
};

class Float_StaticField : public Float_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
};

//
//  ComboBox
//

class ComboBox_FormField : public FormField
{
public:
    void AddItem(std::string);

    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void writeValue(void* obj)=0;
    virtual void readValue(void* obj)=0;
    virtual void setActive(bool);
    virtual void copy(void* obj, void* obj2){
        *get(obj) = *get(obj2);
    }
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }

    std::vector<std::string> items;
    int* get(void* obj_) {return (int*)(obj_ + offset);}
};

class ComboBox_EditField : public ComboBox_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
    virtual void readValue(void* obj);
};

class ComboBox_StaticField : public ComboBox_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
    virtual void readValue(void* obj);
};

//
//  Boolean
//

class CheckBox_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void writeValue(void* obj)=0;
    virtual void readValue(void* obj)=0;
    virtual void copy(void* obj, void* obj2){
        *get(obj) = *get(obj2);
    }
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    bool* get(void* obj_) {return (bool*)(obj_ + offset);}
};

class CheckBox_EditField : public CheckBox_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
    virtual void readValue(void* obj);
};

class CheckBox_StaticField : public CheckBox_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
    virtual void readValue(void* obj);
};

//
//  Vector2
//


class Vector2_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void writeValue(void* obj)=0;
    virtual void readValue(void* obj);
    virtual int getHeight(){return 2;}
    virtual int getNumIds(){return 2;}
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    core::vector2df* get(void* obj_) {return (core::vector2df*)(obj_ + offset);}
};

class Vector2_EditField : public Vector2_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
};

class Vector2_StaticField : public Vector2_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
};

//
//  Vector3
//

class Vector3_FormField : public FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos)=0;
    virtual void writeValue(void* obj)=0;
    virtual void readValue(void* obj);
    virtual int getHeight(){return 3;}
    virtual bool is_equal(void* a, void* b) {
        return *get(a) == *get(b);
    }
    core::vector3df* get(void* obj_) {return (core::vector3df*)(obj_ + offset);}
};

class Vector3_EditField : public Vector3_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj);
};

class Vector3_StaticField : public Vector3_FormField
{
public:
    virtual int addWidget(Reflected_GUI_Edit_Form* win, int ID, int ypos);
    virtual void writeValue(void* obj){}
};


#endif
