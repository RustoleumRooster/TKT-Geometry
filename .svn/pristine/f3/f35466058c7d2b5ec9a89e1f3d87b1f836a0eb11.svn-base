#ifndef _GUI_TOOLS_H_
#define _GUI_TOOLS_H_

#include <irrlicht.h>
#include <vector>
#include <string>

using namespace irr;

class tool_base;
class geometry_scene;
class tool_header;

class multi_tool_panel : public gui::IGUIElement
{
public:

    multi_tool_panel(gui::IGUIEnvironment* env, gui::IGUIElement* parent,s32 id,core::rect<s32> rect);


    void add_tool(tool_base*);
    void remove_tool(int tool_no);

    void show_tool(int tool_no);
    void do_layout();
    void nameChange(tool_base*);

    virtual void draw();
    virtual bool OnEvent(const SEvent& event);

    gui::IGUIElement* getClientRect();

    void updateClientRect();
    gui::IGUIElement* clientRect;
    std::vector<tool_base*> my_tools;
    std::vector<tool_header*> my_headers;
};

class tool_header : public gui::IGUIElement
{
public:
    tool_header(gui::IGUIEnvironment* env, gui::IGUIElement* parent,s32 id,core::rect<s32> rect);

    virtual void draw();
    virtual void setText(std::wstring txt);
    virtual bool OnEvent(const SEvent& event);

    gui::IGUIStaticText* my_text = NULL;
    gui::IGUIButton* CloseButton;
   // std::wstring text;
    int tool_no;
    bool can_select = true;
    bool hovered = false;
};

/*
class multi_tool
{
    static initialize(multi_tool_panel* panel_)
    {
        my_panel = panel;
    }

    static add_tool(tool_base* tool)
    {
        multi_tool_panel_tool::my_panel->add_tool(tool);
    }

private:
    static multi_tool_panel* my_panel;
}
*/

class tool_base
{
public:

    virtual void initialize(std::wstring name_,int my_id,gui::IGUIEnvironment* env_, geometry_scene* g_scene_,multi_tool_panel*);
    virtual void show() = 0;
    virtual std::wstring getName(){return name;}
    virtual void setName(std::wstring txt);
    virtual int getID() {return my_ID;}

protected:
    gui::IGUIEnvironment* env = NULL;
    geometry_scene* g_scene = NULL;
    multi_tool_panel* panel = NULL;
    std::wstring name;
    int my_ID;
};




#endif
