#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

struct Node
{
	vec4 aabbMin;
	vec4 aabbMax;

	vec4 padding;

	uint left_node;
	uint right_node;

	uint first_prim;
	uint n_prims;
	
};

struct LightSource
{
	vec3 pos;
	uint radius;
};

layout(std140, binding = 0) readonly buffer indexUBO
{
	uint global_indices[];
};

layout(std140, binding = 1) readonly buffer vertUBO
{
	vec3 global_vertices[];
};

layout(std140, binding = 2) readonly buffer uvUBO
{
	vec3 map_uvs[];
};

layout(std140, binding = 3) readonly buffer nodeUBO
{
	Node global_nodes[];
};

layout(std140, binding = 4) readonly buffer lightsUBO
{
	LightSource global_lights[];
};

layout(std140, binding = 5) readonly buffer quadUBO
{
	vec3 bounding_quads[];
};

layout(std140, binding = 6) buffer hitResults
{
	vec3 hits[];
};

layout (binding = 7) uniform raytraceParams 
{
	vec3 light_pos;

	uint n_rays;
	uint n_triangles;
	uint n_vertices;
	uint n_nodes;

	uint m_triangles_vertex_offset;
	uint m_triangle_offset;
	uint m_n_triangles;
	
	uint lm_width;
	uint lm_height;

	uint faces_offset;

} params;

layout(std140, binding = 8) readonly buffer firstTriangleUBO
{
	uint firstTriangleIndices[];
};

layout(std140, binding = 9) readonly buffer nTrianglesUBO
{
	uint nTriangleIndices[];
};

layout(binding = 10, rgba8) uniform image2D workingImage;

layout(binding = 11, rgba8) uniform image2D imageOut;

//==================================================
// Random numbers (Tiny Encryption Algorithm)
//

uint[2] tea(uint v[2])
{
	uint v0 = v[0];
	uint v1 = v[1];
	uint delta = 0x9E3779B9;
	uint k0 = 0xA341316C;
	uint k1 = 0xC8013EA4;
	uint k2 = 0xAD90777D;
	uint k3 = 0x7E95761E;
	uint sum = 0;

	for(int i=0;i<6;i++)
	{
		sum+=delta;
		v0+= ((v1<<4) + k0) ^ (v1+sum) ^ ((v1>>5) + k1);
		v1+= ((v0<<4) + k2) ^ (v0+sum) ^ ((v0>>5) + k3);
	}

	return uint[2](v0,v1);
}

float random_to_float01(uint random)
{
	uint u = random >> 9 | 0x3F800000;
	return uintBitsToFloat(u) - 1.0;
}

//==================================================
// Global functions
//



float trace_node_triangles_hit(in uint node_i, in vec3 eye, in vec3 ray)
{
	vec3 edge1, edge2, rayVecXe2, s, sXe1;
	float det, invDet, u, v;

	float best = 0xFFFF;
	for(uint j = 0; j < global_nodes[node_i].n_prims; j++)
	{
		uint idx;

		if(j==0)
			idx = floatBitsToUint(global_nodes[node_i].padding.x);
		else if(j==1)
			idx = floatBitsToUint(global_nodes[node_i].padding.y);

		edge1 = global_vertices[global_indices[(idx*3) + 1]] - global_vertices[global_indices[idx*3]];
		edge2 = global_vertices[global_indices[(idx*3) + 2]] - global_vertices[global_indices[idx*3]];
		rayVecXe2 = cross(ray,edge2);
		det = dot(edge1,rayVecXe2);

		//if(det > -0.00001 && det < 0.00001)
		if(det < 0.00001)
			continue;

		invDet = 1.0 / det;
		s = eye - global_vertices[global_indices[idx*3]];
		u = invDet * dot(s,rayVecXe2);

		if( u < 0.0 || u > 1.0) 
			continue;

		sXe1 = cross(s,edge1);
		v = invDet * dot(ray,sXe1);

		if(v < 0.0 || u+v > 1.0) 
			continue;

		float t = invDet * dot(edge2,sXe1);

		if(t > 0 && t < best)
			{
				best=t;
			}
	}
	return best;
}

bool point_in_node(in uint node_i, vec3 eye)
{
	Node node = global_nodes[node_i];

	if(eye.x < node.aabbMax.x + 1.1f && eye.x > node.aabbMin.x - 1.1f &&
		eye.y < node.aabbMax.y + 1.1f && eye.y > node.aabbMin.y - 1.1f &&
		eye.z < node.aabbMax.z + 1.1f && eye.z > node.aabbMin.z - 1.1f )
	{
		return true;
	}

	return false;
}

float trace_node_hit(in uint node_i, in vec3 eye, in vec3 ray)
{
	Node node = global_nodes[node_i];
	float dif;
	float t;
	float best = 0xFFFF;
	vec3 hit;

	if(eye.x < node.aabbMax.x + 0.001 && eye.x > node.aabbMin.x - 0.001 &&
		eye.y < node.aabbMax.y + 0.001 && eye.y > node.aabbMin.y - 0.001 &&
		eye.z < node.aabbMax.z + 0.001 && eye.z > node.aabbMin.z - 0.001 )
	{
		return 0;
	}

	//X MIN PLANE
	dif = node.aabbMin.x - eye.x;
	t = dif / ray.x;
	hit = eye + ray*t;

	if(t > 0 && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//X MAX PLANE
	dif = node.aabbMax.x - eye.x;
	t = dif / ray.x;
	hit = eye + ray*t;

	if(t > 0 && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//Y MIN PLANE
	dif = node.aabbMin.y - eye.y;
	t = dif / ray.y;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//Y MAX PLANE
	dif = node.aabbMax.y - eye.y;
	t = dif / ray.y;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.z > node.aabbMin.z && hit.z < node.aabbMax.z && t < best)
		best = t;

	//Z MIN PLANE
	dif = node.aabbMin.z - eye.z;
	t = dif / ray.z;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && t < best)
		best = t;

	//Z MAX PLANE
	dif = node.aabbMax.z - eye.z;
	t = dif / ray.z;
	hit = eye + ray*t;

	if(t > 0 && hit.x > node.aabbMin.x && hit.x < node.aabbMax.x && hit.y > node.aabbMin.y && hit.y < node.aabbMax.y && t < best)
		best = t;

	return best;
}

vec3 rand_hemisphere_ray(in vec3 N, in vec3 Tan, in vec3 BiTan, inout uint seed)
{
	uint[2] V = tea(uint[2](seed,0));

	float theta = acos( random_to_float01(V[0]) );
	float omega = (random_to_float01(V[1]) * 3.1415926535 * 2);
	
	float x = sin(theta)*cos(omega);
	float y = sin(theta)*sin(omega);
	float z = cos(theta);

	vec3 ray = Tan*x + BiTan*y + N*z;
	ray = normalize(ray);

	seed = V[1];

	return ray;
}

uint indexed(uint v_i)
{
	return global_indices[v_i];
}

uint indexed(uint v_i, uint offset)
{
	return global_indices[v_i+offset];
}


//==================================================
// Private variables
//

uint[10] stack;
float[10] stack_distance;
uint stack_n;
uint rand_state;
vec3 last_state;
float last_value;

//==================================================
// Functions that use private variables
//

vec4 gen_rand4()
{
	vec4 ret;

	uint[2] V = tea(uint[2](rand_state,0));
	ret.r = random_to_float01(V[0]);
	ret.g = random_to_float01(V[1]);

	rand_state = V[1];

	V = tea(uint[2](rand_state,0));
	ret.b = random_to_float01(V[0]);
	ret.a = random_to_float01(V[1]);

	rand_state = V[1];

	return ret;
}

vec3 gen_rand3()
{
	vec3 ret;

	uint[2] V = tea(uint[2](rand_state,0));
	ret.x = random_to_float01(V[0]);
	ret.y = random_to_float01(V[1]);

	V = tea(uint[2](V[1],0));
	ret.z = random_to_float01(V[0]);

	rand_state = V[1];

	return ret;
}

vec2 gen_rand2()
{
	vec2 ret;

	uint[2] V = tea(uint[2](rand_state,0));
	ret.r = random_to_float01(V[0]);
	ret.g = random_to_float01(V[1]);

	rand_state = V[1];

	return ret;
}

float gen_rand1()
{
	float ret;

	uint[2] V = tea(uint[2](rand_state,0));
	ret = random_to_float01(V[0]);

	rand_state = V[1];

	return ret;
}

void open_node2(uint node_i, vec3 eye)
{
	bool left,right;

	left = point_in_node(global_nodes[node_i].left_node,eye);

	right = point_in_node(global_nodes[node_i].right_node,eye);

	if(left && right)
	{
		stack[stack_n] = global_nodes[node_i].left_node;

		stack[stack_n+1] = global_nodes[node_i].right_node;

		stack_n += 2;
	}
	else if(left)
	{
		stack[stack_n] = global_nodes[node_i].left_node;

		stack_n += 1;
	}
	else if(right)
	{
		stack[stack_n] = global_nodes[node_i].right_node;

		stack_n += 1;
	}
}

void open_node(uint node_i, vec3 eye, vec3 ray)
{
	float left,right;

	left = trace_node_hit(global_nodes[node_i].left_node,eye,ray);

	right = trace_node_hit(global_nodes[node_i].right_node,eye,ray);

	if(left < 0xFFFF && right < 0xFFFF)
	{
		if(left < right)
		{
			stack[stack_n] = global_nodes[node_i].right_node;
			stack_distance[stack_n] = right;

			stack[stack_n+1] = global_nodes[node_i].left_node;
			stack_distance[stack_n+1] = left;
		}
		else
		{
			stack[stack_n] = global_nodes[node_i].left_node;
			stack_distance[stack_n] = left;

			stack[stack_n+1] = global_nodes[node_i].right_node;
			stack_distance[stack_n+1] = right;
		}

		stack_n += 2;
	}
	else if(left < 0xFFFF)
	{
		stack[stack_n] = global_nodes[node_i].left_node;
		stack_distance[stack_n] = left;

		stack_n += 1;
	}
	else if(right < 0xFFFF)
	{
		stack[stack_n] = global_nodes[node_i].right_node;
		stack_distance[stack_n] = right;

		stack_n += 1;
	}
}

float trace_scene_hit(vec3 eye, vec3 ray)
{
	stack_n=0;
	float best = 0xFFFF;

	if(trace_node_hit(0,eye,ray) < 0xFFFF)
	{
		open_node(0,eye,ray);

		while(stack_n > 0)
		{
			stack_n -= 1;

			if(global_nodes[stack[stack_n]].n_prims > 0)
			{
				float t = trace_node_triangles_hit(stack[stack_n],eye,ray);
				best = min(t,best);

			}
			else if(stack_distance[stack_n] < best)
			{
				open_node(stack[stack_n],eye,ray);
			}
		}
	}

	return best;
}

float trace_scene_hit(vec3 eye, vec3 ray, float max_t)
{
	return min(max_t, trace_scene_hit(eye,ray));
}

//==================================================
// Layout
//

layout (local_size_x = 32, local_size_y = 8, local_size_z = 1) in;

//==================================================
// Shared variables
//
shared uint block_x0,block_y0,block_x1,block_y1;
shared vec3 qV0,qV1,qV2,qV3;

shared float m0,m1,m2;
shared bool b0,b1,bNegativeX;
shared uint i_0;
shared uint v_0,v_1,v_2;
shared vec2 w0,w1,w2;
shared float y0;
shared vec3 Normal,Tan,Bitan;
shared uint x0,x1;
shared vec3 shared_light_pos;


shared uint X0,Y0;

shared uint triangle_i;

//subgroup variables
shared vec3 spec_normal[8];
shared vec3 spec_tan[8];
shared vec3 spec_bitan[8];
shared float subgroup_total[8];
shared uint subgroup_n[8];
shared vec3 vert_pos[8];
shared bool work_on_tile[8];


shared vec3 edge_normal[8];
shared uint n_edges[8];

//==================================================
// Functions that use shared variables
//

uint node_triangle_edges_hit(in uint node_i, in vec3 P, out vec3 out_normal)
{
	vec3 edge1, edge2;
	uint ret=0;

	for(uint j = 0; j < global_nodes[node_i].n_prims; j++)
	{
		uint idx;

		if(j==0)
			idx = floatBitsToUint(global_nodes[node_i].padding.x);
		else if(j==1)
			idx = floatBitsToUint(global_nodes[node_i].padding.y);

		vec3 v0 = global_vertices[global_indices[idx*3]];
		vec3 v1 = global_vertices[global_indices[(idx*3) + 1]];
		vec3 v2 = global_vertices[global_indices[(idx*3) + 2]];

		if(abs(dot(normalize(cross(v1 - v0, v2 - v1)),Normal) - 1.0f) > 0.001f)
		{

			if (length(P-v0) + length(P-v1) - length(v1 - v0) < 0.25f )
			{
				vec3 n = normalize(v1 - v0);
				float dist = length(vec3(v0 - P) - n * dot(vec3(v0 - P),n));

				if(dist < 1.5f)
				{
					out_normal = cross(v1 - v0, v2 - v1);
					out_normal = normalize(Normal);

					ret+=1;
				}
			}
			else if(length(P-v2) + length(P-v1) - length(v1 - v2) < 0.25f )
			{
				vec3 n = normalize(v1 - v2);
				float dist = length(vec3(v2 - P) - n * dot(vec3(v2 - P),n));

				if(dist < 1.5f)
				{
					out_normal = cross(v1 - v0, v2 - v1);
					out_normal = normalize(Normal);

					ret+=1;
				}
			}
			else if(length(P-v0) + length(P-v2) - length(v2 - v0) < 0.25f )
			{
				vec3 n = normalize(v2 - v0);
				float dist = length(vec3(v0 - P) - n * dot(vec3(v0 - P),n));

				if(dist < 1.5f)
				{
					out_normal = cross(v1 - v0, v2 - v1);
					out_normal = normalize(Normal);

					ret+=1;
				}
			}
		}
	}

	return ret;
}

void find_edge_normals(vec3 eye)
{
	stack_n=0;
	n_edges[gl_SubgroupID] = 0;

	if(point_in_node(0,eye))
	{
		open_node2(0,eye);

		while(stack_n > 0)
		{
			stack_n -= 1;

			if(global_nodes[stack[stack_n]].n_prims > 0)
			{
				n_edges[gl_SubgroupID] += node_triangle_edges_hit(stack[stack_n],eye,edge_normal[gl_SubgroupID]);

				if(n_edges[gl_SubgroupID] > 1)
					return;
			}
			else
			{
				open_node2(stack[stack_n],eye);
			}
		}
	}

	return;
}
	

bool sphere_intersects_triangle(in vec3 P, in float r)
{

	vec3 A = global_vertices[v_0] - P;
	vec3 B = global_vertices[v_1] - P;
	vec3 C = global_vertices[v_2] - P;

	float rr = r*r;
	vec3 V = cross(B-A, C-A);
	float d = dot(A,V);
	float e = dot(V,V);

	if(d*d > rr*e)
		return false;

	float aa = dot(A,A);
	float ab = dot(A,B);
	float ac = dot(A,C);
	float bb = dot(B,B);
	float bc = dot(B,C);
	float cc = dot(C,C);

	if(( aa > rr) && (ab > aa) && (ac > aa))
		return false;

	if(( bb > rr) && (ab > bb) && (bc > bb))
		return false;

	if(( cc > rr) && (ac > cc) && (bc > cc))
		return false;

	vec3 AB = B - A;
	vec3 BC = C - B;
	vec3 CA = A - C;

	float d1 = ab - aa;
	float d2 = bc - bb;
	float d3 = ac - cc;
	float e1 = dot(AB,AB);
	float e2 = dot(BC,BC);
	float e3 = dot(CA,CA);
	vec3 Q1 = A * e1 - d1 * AB;
	vec3 Q2 = B * e2 - d2 * BC;
	vec3 Q3 = C * e3 - d3 * CA;
	vec3 QC = C * e1 - Q1;
	vec3 QA = A * e2 - Q2;
	vec3 QB = B * e3 - Q3;
	
	if((dot(Q1,Q1) > rr * e1 * e1) && dot(Q1,QC) > 0)
		return false;

	if((dot(Q2,Q2) > rr * e2 * e2) && dot(Q2,QA) > 0)
		return false;

	if((dot(Q3,Q3) > rr * e3 * e3) && dot(Q3,QB) > 0)
		return false;

	return true;
}

vec3 uv_to_vec3(in vec2 uv)
{
	vec2 xy = vec2( float(uv.x - block_x0) / (block_x1 - block_x0), 1.0f - float(uv.y - block_y0) / (block_y1 - block_y0));
	return qV0 + (vec3(qV1-qV0) * xy.x) + (vec3(qV3-qV0) * xy.y);
}

float floor_y_value(float y)
{
	return (floor(params.lm_height * y)+0.5f) / params.lm_height;
}

float floor_x_value(float x)
{
	return (floor(params.lm_width * x)+0.5f) / params.lm_width;
}

float MajorX(float y)
{
	return w0.x + (m0 * (y - w0.y));
}

float MinorX(float y)
{
	if(b0 && b1)
	{
		if(bNegativeX)
		{
			return max(w0.x + (m1 * (y - w0.y)), w2.x + (m2 * (y - w2.y)));
		}
		else
		{
			return min(w0.x + (m1 * (y - w0.y)), w2.x + (m2 * (y - w2.y)));
		}
	}
	else if(b0)
	{
		return w0.x + (m1 * (y - w0.y));
	}
	else if(b1)
	{
		return w2.x + (m2 * (y - w2.y));
	}
	return 0;
}

void do_workgroup_tasks()
{
	//========================================================
	// Assign the vertex in order of increasing y in uv coords 
	// v0 = least y     v1 = greatest y     v2 = in between
	//
	// v0 -> v1 is the major axis
	// v0 -> v2 and v2 -> v1 are the minor axis
	//
	//					* v0
	//
	//				* v2
	//				          * v1

	//i_0 = params.m_triangle_offset * 3; // + (gl_WorkGroupID.x+0)*3;
	//i_0 = params.m_triangle_offset * 3 + triangle_i * 3;
	i_0 = firstTriangleIndices[gl_WorkGroupID.x] * 3 + triangle_i * 3;

	if(map_uvs[indexed(i_0)].y < map_uvs[indexed(i_0,1)].y)
		v_0 = 0;
	else
		v_0 = 1;

	if(map_uvs[indexed(i_0,v_0)].y < map_uvs[indexed(i_0,2)].y)
		v_0 = v_0;
	else
		v_0 = 2;

	if(map_uvs[indexed(i_0,((v_0+1)%3))].y > map_uvs[indexed(i_0,((v_0+2)%3))].y)
	{
		v_1 = (v_0+1)%3;
		v_2 = (v_0+2)%3;
	}
	else
	{
		v_1 = (v_0+2)%3;
		v_2 = (v_0+1)%3;
	}

	v_0 = indexed(i_0,v_0);
	v_1 = indexed(i_0,v_1);
	v_2 = indexed(i_0,v_2);

	w0 = vec2(floor_x_value(map_uvs[v_0].x),floor_y_value(map_uvs[v_0].y));
	w1 = vec2(floor_x_value(map_uvs[v_1].x),floor_y_value(map_uvs[v_1].y));
	w2 = vec2(floor_x_value(map_uvs[v_2].x),floor_y_value(map_uvs[v_2].y));

	//hits[gl_WorkGroupID.x * 3 + 0].xy = vec2(map_uvs[v_0].x,map_uvs[v_0].y);
	//hits[gl_WorkGroupID.x * 3 + 1].xy = vec2(map_uvs[v_1].x,map_uvs[v_1].y);
	//hits[gl_WorkGroupID.x * 3 + 2].xy = vec2(map_uvs[v_2].x,map_uvs[v_2].y);

	m0 = (w1.x - w0.x) / (w1.y - w0.y);
	m1 = (w2.x - w0.x) / (w2.y - w0.y);
	m2 = (w1.x - w2.x) / (w1.y - w2.y);

	b0=false;
	b1=false;

	if(map_uvs[v_2].y > map_uvs[v_0].y+0.0001f)
		b0 = true;

	if(map_uvs[v_1].y > map_uvs[v_2].y+0.0001f)
		b1 = true;

	bNegativeX = false;

	if(MajorX(w2.y) > w2.x)
		bNegativeX = true;
		

	//==================================================
	// Build a matrix to convert from UV to world coords (deprecated)
	//

	/*
	vec3 V4 = vec3(w0,0) + cross( vec3(w1,0) - vec3(w0,0), vec3(w2,0) - vec3(w0,0));

	mat4 T1 = mat4(	vec4(w0,0,1),
					vec4(w1,0,1),
					vec4(w2,0,1),
					vec4(V4,1));

	V4 = global_vertices[v_0] + cross(global_vertices[v_1] - global_vertices[v_0], global_vertices[v_2] - global_vertices[v_0]);

	mat4 T2 = mat4( vec4(global_vertices[v_0],1),
					vec4(global_vertices[v_1],1),
					vec4(global_vertices[v_2],1),
					vec4(V4,1));

	T1 = inverse(T1);

	uv2worldMat = T2 * T1;
	*/

	//============================================
	// Normal and Tangents
	//
		
	Normal = cross(global_vertices[indexed(i_0,1)] - global_vertices[indexed(i_0,0)], global_vertices[indexed(i_0,2)] - global_vertices[indexed(i_0,1)]);
	Normal = normalize(Normal);

	vec3 upvec;

	if(dot(Normal,vec3(0,0,1)) > 0.999f || dot(Normal,vec3(0,0,-1)) > 0.999f)
	{
		upvec = vec3(0.5f, 0.0f, 1.0f);
		upvec = normalize(upvec);
	}
	else
		upvec = vec3(0.0f, 0.0f, 1.0f);
		
	Tan = cross(Normal,upvec);
	Bitan = cross(Normal,Tan);


	shared_light_pos = global_lights[0].pos;
}

void do_subgroup_initial_tasks(ivec2 ipos)
{

	vert_pos[gl_SubgroupID] = uv_to_vec3( vec2(ipos.x, ipos.y) );

	//=================================================================
	//  Specular coordinate system, z is specular direction
	//

	spec_normal[gl_SubgroupID] = normalize(shared_light_pos - vert_pos[gl_SubgroupID]);

	vec3 upvec;

	if(dot(spec_normal[gl_SubgroupID],vec3(0.0f,0.0f,1.0f)) > 0.999f || dot(spec_normal[gl_SubgroupID],vec3(0.0f,0.0f,-1.0f)) > 0.999f)
	{
		upvec = vec3(0.5f, 0.0f, 1.0f);
		upvec = normalize(upvec);
	}
	else
		upvec = vec3(0.0f, 0.0f, 1.0f);
		
	spec_tan[gl_SubgroupID] = cross(spec_normal[gl_SubgroupID],upvec);
	spec_bitan[gl_SubgroupID] = cross(spec_normal[gl_SubgroupID],spec_tan[gl_SubgroupID]);

	subgroup_total[gl_SubgroupID] = 0.0f;
	subgroup_n[gl_SubgroupID] = 0;

}

//====================================================================
// Monte Carlo functions
//

vec2 sample_uniform_hemi(float u0, float u1)
{
	return vec2(acos(u0),u1 * 2.0f * 3.1415926f);
}

float pdf_uniform_hemi()
{
    return 1.0f / (2.0f * 3.1415926f);
}

float pdf_specular_falloff(float theta)
{
	return (1.0f + 9.0f) * pow( cos(theta), 9) * sin(theta) / (2 * 3.1415926f);
}

float sample_exp_falloff(float u)
{
	return - (1.0f / 2.5f) * log(1 - u );
}

float pdf_exp_falloff(float x)
{
	return 2.5f * pow(2.718281f, -2.5f * x);
}

float pdf_lin_falloff()
{
	return 1.0f;
}

vec3 gen_path(vec3 u)
{
	return vec3(acos( pow(u.x ,1.0f / 10.0f) ),
				u.y * 2.0f * 3.1415926f,
				 u.z
				);
}

vec2 sample_specular_hemi(float u0, float u1)
{
	return vec2(acos( pow(u0 ,1.0f / 10.0f) ),u1 * 2.0f * 3.1415926f);
}

vec3 gen_ray(in float theta, in float phi)
{
	float x = sin(theta)*cos(phi);
	float y = sin(theta)*sin(phi);
	float z = cos(theta);

	vec3 ray = spec_tan[gl_SubgroupID]*x + spec_bitan[gl_SubgroupID]*y + spec_normal[gl_SubgroupID]*z;
	ray = normalize(ray);

	return ray;
}

float weight_power(float p0, float p1)
{
	return p0 * p0 / (p0 * p0 + p1 * p1);
}

float distance_factor(float dist)
{
	float d = dist / 100.f; 
	d = d * d ;

	if(d < 120.0f)
	{
		return (1.0 - (d / 120.0f));
	}

	return 0.0f;
}

float mutate(float value)
{
	vec2 u = gen_rand2();
	float s1 = 1.0f/1024;
	float s2 = 1.0f/32;
	float dv = s2 * exp(-log(s2/s1) * u.x);
	if(u.y < 0.5f)
	{
		value += dv;
		if(value > 1.0f)
			value -=1;
	}
	else
	{
		value -= dv;
		if(value < 0.0f)
			value +=1;
	}

	return value;
}

vec3 mutate(vec3 state)
{
	state.x = mutate(state.x);
	state.y = mutate(state.y);
	state.z = mutate(state.z);

	return state;
}

vec2 energy_density(float dist)
{
	if(dist < 64.0f)
		return vec2(1.0f,0.0f);

	if(dist > 276.0f)
		return normalize(vec2(1.0f,1.0f));

	return normalize(vec2(1.0f,1.0f * (dist-64.0f) / 212.0f));
}

float sample_refracted_rays_x4(vec3 pos, vec3 ray, float t, float u)
{
	vec3 vertex,ray1;
	float sample_t, t1, min_len, p1, len1;
	float ret = 0.0f;

	float d = 64.0; //length(pos - shared_light_pos);

	sample_t = d * sample_exp_falloff(u);
	if(sample_t < t - 1.0)
	{
		vertex = pos + ray * sample_t;
		ray1 = shared_light_pos - vertex;
		ray1 = normalize(ray1);

		vec3 z = cross(ray1,ray);
		z = cross(ray,z);

		min_len = length(vec3(vertex - shared_light_pos));
		
		t1 = trace_scene_hit(vertex,ray1);

		vec2 e_density = energy_density(min_len);

		//p1 = 0.5f * pdf_exp_falloff(u) + 0.5f;

		p1 = 1.0;
		if(t1 > min_len)
		{
			ret += dot(ray,ray1) * e_density.x * (1.0f / p1) * distance_factor(min_len);
			ret += dot(ray,z) * e_density.y * (1.0f / p1) * distance_factor(min_len);
		}
		else
		{
		}
	}

	return ret;

}


float evaluate_path(vec3 ray, float theta, float u)
{
	float t = trace_scene_hit(vert_pos[gl_SubgroupID], ray);

	float ray_contribution = 0.0f;

	ray_contribution += sample_refracted_rays_x4(vert_pos[gl_SubgroupID],ray,t,u);

	return dot(ray,Normal) *  ray_contribution * weight_power(pdf_specular_falloff(theta),pdf_uniform_hemi());
}

void do_subgroup_brightness(ivec2 pos)
{
	vec3 ray = normalize(shared_light_pos - vert_pos[gl_SubgroupID]);
	float dist = length(vec3(vert_pos[gl_SubgroupID] - shared_light_pos));
	float intensity0, intensity1;

	bool visible = true;

	float t = trace_scene_hit(vert_pos[gl_SubgroupID], ray);
					
	if( t > dist)
	{
		intensity0 = dot(ray,Normal) * distance_factor(dist);
	}
	else intensity0 = 0;

	if(dist < 64.0f)
		intensity1 = intensity0;
	else
		intensity1 = 1.8f * subgroup_total[gl_SubgroupID] /  (subgroup_n[gl_SubgroupID]);

/*
	if(dist > 128.0f)
		intensity = 1.0f * subgroup_total[gl_SubgroupID] /  (subgroup_n[gl_SubgroupID]);
	else if(dist > 64.0f)
	{
		float f = (dist-64.0f) / 64.0;
		intensity = f * subgroup_total[gl_SubgroupID] /  (subgroup_n[gl_SubgroupID]);

		float t = trace_scene_hit(vert_pos[gl_SubgroupID], ray);
					
		if( t > dist && visible)
		{
			intensity += (1.0f - f) * dot(ray,Normal) * distance_factor(dist);
		}
	}
	else if(visible)
	{
		float t = trace_scene_hit(vert_pos[gl_SubgroupID], ray);
					
		if( t > dist)
		{
			intensity = dot(ray,Normal) * distance_factor(dist);
		}
	}
*/
				
	//float intensity = subgroup_total[gl_SubgroupID] /  (subgroup_n[gl_SubgroupID]);
	//intensity = 0.1f;
	//if(  !(point_type[gl_subgroupID] == 0 || point_type[gl_subgroupID] == 2 ||point_type[gl_subgroupID] == 4))
	//if(  !(point_type[gl_SubgroupID] == 0 || point_type[gl_SubgroupID] == 2 || point_type[gl_SubgroupID] == 4))
	//if(point_type[gl_subgroupID] == 1 )//|| point_type[gl_subgroupID] == 3 ||point_type[gl_subgroupID] == 5)
	//imageStore(imageOut,ivec2(x0 + gl_SubgroupID + 8*i, uint(params.lm_height * y0)),vec4(intensity,1.0f,intensity,1.0f));

	imageStore(imageOut,pos,vec4(1.0f,1.0f,(intensity0 - intensity1) * 2.0f,1.0f));

}

void main()
{
	uint ix = gl_LocalInvocationID.x;
	uint iy = gl_LocalInvocationID.y;
	uint thread_id = iy * gl_WorkGroupSize.x + ix;


	//if(gl_WorkGroupID.x * 3 < params.m_triangles_n_indices && ix == 0 && iy == 0)

	if(ix==0 && iy==0)
	{
		triangle_i=0;

		qV0 = bounding_quads[(params.faces_offset + gl_WorkGroupID.x)*4];
		qV1 = bounding_quads[(params.faces_offset + gl_WorkGroupID.x)*4 + 1];
		qV2 = bounding_quads[(params.faces_offset + gl_WorkGroupID.x)*4 + 2];
		qV3 = bounding_quads[(params.faces_offset + gl_WorkGroupID.x)*4 + 3];
	}

	do
	{

		if(ix==0 && iy==0)
		{
			do_workgroup_tasks();

			if(triangle_i == 0)
			{
				block_x0 = uint(params.lm_width * w0.x);
				block_x1 = uint(params.lm_width * w0.x);
				block_y0 = uint(params.lm_height * w0.y);
				block_y1 = uint(params.lm_height * w0.y);
			}

			block_x0 = uint(min(block_x0,min(params.lm_width * w0.x , min(params.lm_width * w1.x , params.lm_width * w2.x))));
			block_y0 = uint(min(block_y0,min(params.lm_height * w0.y, min(params.lm_height * w1.y, params.lm_height * w2.y))));
			block_x1 = uint(max(block_x1,max(params.lm_width * w0.x , max(params.lm_width * w1.x , params.lm_width * w2.x))));
			block_y1 = uint(max(block_y1,max(params.lm_height * w0.y, max(params.lm_height * w1.y, params.lm_height * w2.y))));

		}

		barrier();

		if(ix == 0 && iy == 0)
		{
			y0 = w0.y;
		}

		barrier();

		while(y0 < w1.y + 0.001f)
		{

			barrier();

			if(ix == 0 && iy == 0)
			{
				if(bNegativeX==false)
					{
							x0 = uint(params.lm_width * MajorX(y0));
							x1 = uint(params.lm_width * MinorX(y0));
					}
				else
					{
							x0 = uint(params.lm_width * MinorX(y0));
							x1 = uint(params.lm_width * MajorX(y0));
					}
			}

			barrier();

			for(int i=0; i<32; i++)
			{
				if(x0 + ix + 32*i <= x1)
				{
					//float intensity = (1.0f / 32.f) * ix;
					imageStore(workingImage,ivec2(x0 + ix + 32*i, uint(params.lm_height * y0)),vec4(1.0f,1.0f,1.0f,1.0f));
				}
			}
		
			barrier();

			if(ix == 0 && iy == 0)
			{
				y0 += (1.0f / params.lm_height);
			}

			barrier();
		}

		barrier();

			if(ix == 0 && iy == 0)
			{
				triangle_i += 1;
			}

		barrier();

	} while(triangle_i < nTriangleIndices[gl_WorkGroupID.x]);

	rand_state = ( ((iy) * 32 ) + ix);

	barrier();

	if(ix==0 && iy==0)
	{
		X0 = block_x0;
		Y0 = block_y0;
	}

	do	//Y
	{
		do	//X
		{
			barrier();

			if(subgroupElect())
			{
				work_on_tile[gl_SubgroupID] = (X0 + gl_SubgroupID <= block_x1) && imageLoad(workingImage,ivec2(X0 + gl_SubgroupID,Y0)).g == 1.0f;
			}

			subgroupBarrier();
			
			if(work_on_tile[gl_SubgroupID] == true)
			{

				if(subgroupElect())
					{
						do_subgroup_initial_tasks(ivec2(X0 + gl_SubgroupID,Y0));
					}

				subgroupBarrier();

				float my_value = 0.0f;
				uint my_count = 0;
			
				for(int j=0; j<16; j++)
				{
					vec3 rand_var = gen_rand3();
					vec3 path = gen_path(rand_var);
					vec3 ray = gen_ray(path.x,path.y);

					if(dot(ray,Normal) > 0.0f)
					{
						my_count +=1;
						my_value += evaluate_path(ray,path.x,path.z);
					}
				}


				subgroupBarrier();

				subgroup_total[gl_SubgroupID] = subgroupAdd( my_value );
				subgroup_n[gl_SubgroupID] = subgroupAdd( my_count );

				if(subgroupElect())
				{
					//do_subgroup_brightness(ivec2(X0 + gl_SubgroupID,Y0));

					n_edges[gl_SubgroupID] = 0;
					
					find_edge_normals(vert_pos[gl_SubgroupID]);

					if(n_edges[gl_SubgroupID] == 0)
						imageStore(imageOut,ivec2(X0 + gl_SubgroupID,Y0),vec4(0.0f,0.0f,0.0f,1.0f));
					else
						imageStore(imageOut,ivec2(X0 + gl_SubgroupID,Y0),vec4(1.0f,1.0f,1.0f,1.0f));
				}

				subgroupBarrier();
			}
			else
			{
				subgroupBarrier();
				subgroupBarrier();
				subgroupBarrier();
			}

			barrier();

			if(ix==0 && iy==0)
			{
				X0+=8;
			}

			barrier();

		} while(X0 <= block_x1);

		barrier();

		if(ix==0 && iy==0)
		{
			Y0+=1;
			X0 = block_x0;
		}

		barrier();
		
	} while (Y0 <= block_y1);


	return;

}




